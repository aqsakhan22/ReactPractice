{"version":3,"sources":["Receipe App/components/Form.js","Receipe App/components/Recipe.js","Receipe App/components/RecipeShow.js","Receipe App/App.js","Receipe App/components/Router.js","serviceWorker.js","index.js"],"names":["Form","props","onSubmit","getRecipe","style","marginBottom","className","type","name","Recipe","componentDidMount","a","title","location","state","photo","img","setState","activeRecipe","console","log","this","src","color","to","React","Component","RecipeShow","recipeshow","map","recipe","key","recipe_id","length","substring","pathname","App","getrecipe","e","preventDefault","target","elements","recipeName","value","fetch","Api_url","data","json","current","RouterApp","path","component","exact","Boolean","window","hostname","match","ReactDOM","render","StrictMode","Router","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a9c3b60e.chunk.js","sourcesContent":["import React from 'react'\r\nimport  '../../Receipe App/recipe.css'\r\nconst Form= props =>(\r\n\r\n\r\n<form onSubmit={props.getRecipe} style={{marginBottom:\"2rem \"}}>\r\n    <input className=\"recipe__text\" type=\"text\" name=\"recipeName\" />\r\n\r\n    <button className=\"form__button\">Search</button>\r\n</form>\r\n)\r\nexport default Form;","import React from 'react'\r\nimport {Link} from 'react-router-dom'\r\nconst Api_Id=\"afc2f7fc\";\r\nconst Api_Key=\"3a214072ef0adae42bc5f855f8d8c280\";\r\n\r\nclass Recipe extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            activeRecipe:[]\r\n        }\r\n    }\r\n    componentDidMount=async ()=> {\r\n const title=this.props.location.state[0].title;\r\n const photo=this.props.location.state[0].img\r\n//  const url_api=await fetch(`https://api.edamam.com/search?q=${title}&app_id=${Api_Id}&app_key=${Api_Key}`)\r\n//  const data=url_api.json();\r\n//  console.log(data)\r\n\r\n this.setState({activeRecipe:{title,photo}})\r\n \r\n console.log(title)\r\n \r\n    }\r\n    \r\n    render(){\r\n        console.log(this.props);\r\n        return(\r\n          \r\n               <div className=\"container\" >\r\n                   <div className=\"active-recipe\">\r\n             \r\n\r\n              \r\n                <img className=\"active-recipe__img\" src={this.state.activeRecipe.photo}/>\r\n\r\n          \r\n            <h3 className=\"active-recipe__title\">\r\n                \r\n              {this.state.activeRecipe.title}\r\n                </h3>\r\n                <h4 className=\"active-recipe__publisher\">Made by aqsa khan</h4>\r\n               <button className=\"active-recipe__button\" style={{color:\"black\"}}>\r\n                   <Link to=\"/\">Go to Home</Link>\r\n                   </button>\r\n       </div>\r\n                       \r\n                    </div>\r\n             \r\n        \r\n                 \r\n\r\n               \r\n          \r\n        )\r\n    }\r\n}\r\n\r\nexport default Recipe;","import React from 'react'\r\nimport {Link} from 'react-router-dom'\r\nimport Recipe from './Recipe'\r\nconst RecipeShow = props =>(\r\n    <div className=\"container\">\r\n     <div className=\"row\">\r\n\r\n   \r\n    {\r\n         props.recipeshow.map((recipe)=>\r\n        \r\n        {\r\n            return(\r\n                <div key={recipe.recipe_id} className=\"col-md-4\" >\r\n                <div className=\"recipes__box\" >\r\n\r\n               \r\n                <img className=\"recipe__box-img\" src={recipe.img}/>\r\n       <div className=\"recipe__text\">\r\n            <h5 className=\"recipes__title\">\r\n                \r\n                { recipe.title.length < 10 ? `${recipe.title}`  : `${recipe.title.substring(0,25)} ..`\r\n                \r\n                \r\n                 }\r\n                </h5>\r\n       </div>\r\n       <button className=\"recipe__buttons\">\r\n           \r\n          <Link to={\r\n              \r\n              {pathname:`/recipe/${recipe.recipe_id}`,\r\n              state:[{title:recipe.title,img:recipe.img}]\r\n            }\r\n              \r\n              }>View Recipe</Link>\r\n           \r\n           </button>\r\n                </div>\r\n\r\n                 </div>\r\n\r\n            )\r\n        }\r\n         \r\n         )\r\n     }\r\n    </div>\r\n     </div>\r\n\r\n    \r\n)\r\nexport default RecipeShow;","import React , {Component} from 'react'\r\nimport './recipe.css'\r\nimport Form from './components/Form'\r\nimport RecipeShow from './components/RecipeShow'\r\n\r\nconst Api_Id=\"afc2f7fc\";\r\nconst Api_Key=\"3a214072ef0adae42bc5f855f8d8c280\";\r\n       \r\nclass App extends Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            recipe:[\r\n            {recipe_id:\"35171\",title:\"Chicken Vesuvioc salad\",img:\"https://www.edamam.com/web-img/e42/e42f9119813e890af34c259785ae1cfb.jpg\"},\r\n            {recipe_id:\"35172\",title:\"Chicken Paprikash\",img:\"https://www.edamam.com/web-img/e12/e12b8c5581226d7639168f41d126f2ff.jpg\"},\r\n            {recipe_id:\"35173\",title:\"Baked Chicken\",img:\"https://www.edamam.com/web-img/01c/01cacb70890274fb7b7cebb975a93231.jpg\"},\r\n            {recipe_id:\"35174\",title:\"Chicken Feet Stock\",img:\"https://www.edamam.com/web-img/ae9/ae96650072cc599967d945c5e9961bb7.JPG\"},\r\n            {recipe_id:\"35175\",title:\"Catalan Chicken\",img:\"https://www.edamam.com/web-img/4d9/4d9084cbc170789caa9e997108b595de.jpg\"},\r\n            {recipe_id:\"35176\",title:\"Persian Chicken\",img:\"https://www.edamam.com/web-img/8f8/8f810dfe198fa3e520d291f3fcf62bbf.jpg\"},\r\n            // {label:\"\" , img:\"\"},\r\n            // {label:\"\" , img:\"\"},\r\n            // {label:\"\" , img:\"\"},\r\n            // {label:\"\" , img:\"\"},\r\n            // {label:\"\" , img:\"\"},\r\n            // {label:\"\" , img:\"\"},\r\n            \r\n        \r\n        \r\n        ],\r\n            current:'',\r\n           \r\n        }\r\n    }\r\n\r\n    getrecipe =async (e) =>{\r\n        \r\n     e.preventDefault();\r\n     const recipename=e.target.elements.recipeName.value;\r\n     const Api_url= await fetch(`https://api.edamam.com/search?q=chicken&app_id=${Api_Id}&app_key=${Api_Key}`)\r\n    const data=Api_url.json();\r\n        console.log(data);\r\n        // this.state.recipe.map((rec)=>\r\n        // rec.title === recipename ?\r\n        // console.log(\"yes\")\r\n        // :\r\n        // console.log(\"no\")\r\n        \r\n        // )\r\n       \r\n     \r\n       \r\n     \r\n        \r\n        // console.log(data.hits.recipe.label)\r\n      \r\n        // this.setState({recipe:data.hits})\r\n        // console.log(data.hits)\r\n      \r\n    }\r\n\r\nrender(){\r\n    \r\n    return(\r\n        <div>\r\n            <header className=\"App-header\">\r\n            <h1 className=\"App-title\" > Recipe App</h1>\r\n            </header>\r\n          {this.state.current}\r\n         \r\n           \r\n            <Form getRecipe={this.getrecipe}/>\r\n           \r\n          <RecipeShow recipeshow={this.state.recipe}/>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n}\r\nexport default App;","import React from 'react'\r\nimport {BrowserRouter as Router ,Switch,Route} from 'react-router-dom'\r\nimport App from '../App'\r\nimport Recipe from './Recipe'\r\nconst RouterApp=()=>(\r\n\r\n<Router>\r\n    <Route path=\"/\" component={App} exact/>\r\n    <Route path=\"/recipe/:recipeid\" component={Recipe}/>\r\n\r\n</Router>\r\n);\r\nexport default RouterApp;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter as Router} from 'react-router-dom'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css'\n// import './index.css';\n// import App from './App';\n// import App from './Reactjs/App'\n// import App from './TodoApp/App'\n// import App from './TodoAppPractice/App'\n// import App from './ShoppingCart/App'\n// import RouteExample from './RoutingExample/App'\n// import App from './RouterUrlParameters/App'\n\n\n// import App from './Axios/App'\n// import App from './WheatherApp/App'\n// import App from './Receipe App/App'\nimport RouterApp from './Receipe App/components/Router'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <RouterApp />\n    {/* <Router>\n    <RouteExample/>\n    \n     <App/>\n    </Router> */}\n   \n   \n\n  </React.StrictMode>\n  \n  \n  ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}